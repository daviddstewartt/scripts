""" 
Python 3
Create simple application using NMAP Python Driver to scan a machine and
    - Detect Version of software running on webserver
    - Check if web server is vulnerable (Check against dataset provided)
"""
import os
import datetime
import nmap # scanning ports
import urllib.request # getting requests
import json # for formatting


def createReportFile(exploits):
    if not os.path.isdir("./reports"):
        os.makedirs('./reports/')  # create directory
    date = datetime.datetime.now()
    filename = 'vulnerability_report_{}_{}_{}_{}_{}_{}'.format(date.year, date.month, date.day, date.hour, date.minute, date.second)
    f = open('./reports/%s.txt' % filename, 'w+')
    for exploit in exploits:
        port = exploit['port']
        name = exploit['service']['name']
        version = exploit['service']['version']
        vul = exploit['vulnerabilities']
        f.write("[*] PORT %d (%s) v%s\n" %(port, name, version))

        #loop through vulnerabilities and add to file
        for v in vul:
            summary = v['summary']
            references = v['reference']
            f.write("\tSummary: %s\n" %(summary))
            f.write("\tReferences:\n")
            for ref in references:
                f.write("\t\t'%s'\n" %(ref))
            f.write("\n")     
        f.write("\n")     

    return './report/' + filename + '.txt'

""" 
Returns the vulnerabilities details (Summary, References) 
of exploit that affect the system for end report
"""
def parseVulnerabilities(vulnerability, cpe):
    listOfServiceVulnerabilities = []
    for exploit in vulnerability: # loop through vulnerable configurations to see if your system is affected by any expolits        
        for cpe_version in exploit['vulnerable_configuration']:
            
            if(cpe_version == cpe):  # check if it affects current services version
                # add summary, References and version to report
                listOfServiceVulnerabilities.append({
                    'summary': exploit['summary'],
                    'reference': exploit['references']
                })

        for cpe_version_2 in exploit['vulnerable_configuration_cpe_2_2']:
            if(cpe_version_2 == cpe):
                listOfServiceVulnerabilities.append({
                    'summary': exploit['summary'],
                    'reference': exploit['references']
                })

    return listOfServiceVulnerabilities

""" 
Gets the vendor of applications name & name of the 
service from CPE string
"""
def parseURLVendorFromCPE(cpe):
    if cpe != '':
        vendor = cpe.split('cpe:/a:')[1]
        vendor = vendor.split(':')
        return vendor[0] + '/' + vendor[1]
    return ''

""" 
Retrieves the list of vulnerabilities that the 
server is current at risk of
"""
def getServiceVulnerabilities(product):
    vendorURL = parseURLVendorFromCPE(product['cpe']) # get service in url format ("vendor/service")  
    if(vendorURL == ''): #in case there is no cpe available
        name = product['name'].replace(" ", "")
        vendorURL = name + "/" + name
    
    url = 'https://cve.circl.lu/api/search/' + vendorURL + ''.format()
    response = urllib.request.urlopen(url)
    data = json.loads(response.read().decode())
    return parseVulnerabilities(data, product['cpe'])

""" 
Scans vulnerabilities of a hosts server using 
either a specified port (e.g '80') or all ports (e.g '*') 
"""
def scanVulnerabilities(host, port):
    nm = nmap.PortScanner()
    print("Scanning Vulnerabilities on", host + "...")
    nm.scan(host, port)
    
    stats = nm._scan_result['nmap']['scanstats'] # can get uphosts & downhosts from here
    items = nm._scan_result['scan'].items()
    listOfVulnerabilities = []
    for host, results in items:
        print("Report for:", host)
        for port, status in results['tcp'].items():
            # check that version exists, if not say undefined
            print('\nPORT %s (%s):' % (str(port), status['product']))  # port
            print("[*] Service:", status['name'], "~", "v" + status['version']) #service ~ version
            print("[*] Status:", status['state'])  # Status (open/closed)

            
            vulnerabilities = getServiceVulnerabilities(status) # get service vulnerabilities
            if(vulnerabilities):
                vulnerabilities = { 'port': port, 'vulnerabilities': vulnerabilities, 'service': status }
                listOfVulnerabilities.append(vulnerabilities)

    return listOfVulnerabilities

def main():
    # Change to 80 to only scan webserver
    vulnerabilities = scanVulnerabilities('127.0.0.1', '*')

    print("\n----------------------------------------")
    print("Scan Successfully Completed")
    if(len(vulnerabilities)):
        filenameDirectory = createReportFile(vulnerabilities) # add to report file
        print("*Exploits Found!*")
        print(str(len(vulnerabilities)), "service is subjecting system to vulnerabilities")
        print("Report File Created at directory: '%s' " %(filenameDirectory))
    else: 
        print("System not subject to vulnerabilities on scanned ports & services")

if __name__ == "__main__":
   main()
